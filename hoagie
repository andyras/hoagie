#!/bin/bash

hoagie="$(pwd)/hoagie.sh"
HELP=0

function print_help {
 echo "
 hoagie is a script to submit jobs to clusters (so far tim).

 Usage: hoagie -p PROGRAM -n NCPU -e COMMAND -d -k -h -l
 -p: specify program to be run
 -n: specify number of CPUs
 -e: specify executable or command to be run by job
 -d: dry run (don't submit job)
 -k: keep auto-generated hoagie.sh after job is done
 -h: print this help
 -l: make log files for stderr and stdout
 "

 exit
}

# set up PBS environment variables
function set_environment_vars {
 echo "#PBS -V" >> $hoagie
 echo "#PBS -N $(basename $0)" >> $hoagie
}

# set up log files
function set_log_files {
 if [ ! -z ${MAKE_LOGS} ]; then
  echo "#PBS -o stdout.log" >> $hoagie
  echo "#PBS -e stderr.log" >> $hoagie
 else
  echo "#PBS -o /dev/null" >> $hoagie
  echo "#PBS -e /dev/null" >> $hoagie
 fi
}

# request multiple CPUs
function request_cpus {
 if [ ! -z ${NCPU} ]; then
  echo "#PBS -l nodes=1:ppn=${NCPU}" >> $hoagie
 fi
}

# go to directory from which job was submitted.
function go_to_working_dir {
 echo "" >> $hoagie
 echo "# going to PBS working directory" >> $hoagie
 echo "echo \"going to PBS working directory: \${PBS_O_WORKDIR}\"" >> $hoagie
 echo "cd \${PBS_O_WORKDIR}" >> $hoagie
}

# run the script/binary
function run_program {
 echo "" >> $hoagie
 echo "# running program" >> $hoagie
 echo "echo \"running program\"" >> $hoagie
 if [ ! -z "${EXECUTABLE}" ]; then
  echo "${EXECUTABLE}" >> $hoagie
 else
  # run whatever was the argument to this function
  echo "$1" >> $hoagie
 fi
}

# delete the runscript
function delete_runscript {
 if [ ! -z ${KEEP_RUNSCRIPT} ]; then
  :
 else
  echo "" >> $hoagie
  echo "# deleting run script" >> $hoagie
  echo "echo \"deleting run script\"" >> $hoagie
  echo "rm -f ${hoagie}" >> $hoagie
 fi
}

# submit the job
function submit_job {
 if [ ! -z ${DRY_RUN} ]; then
  :
 else
  qsub $hoagie
 fi
}

function dynamix_sub {
set_environment_vars
set_log_files
go_to_working_dir
run_program "./total_dynamix"
#run_program "sleep 10; touch me"
delete_runscript
submit_job
}

while getopts ":p:n:e:dkhl" optname; do
 case $optname in
  p)
   PROGRAM=$OPTARG
   ;;
  n)
   echo "requesting ${OPTARG} CPUs"
   NCPU=$OPTARG
   ;;
  e)
   EXECUTABLE=$OPTARG
   ;;
  d)
   echo "dry run"
   DRY_RUN=1
   ;;
  k)
   KEEP_RUNSCRIPT=1
   ;;
  l)
   MAKE_LOGS=1
   ;;
  h)
   HELP=1
 esac
done

if [ ${HELP} -eq 1 ]; then
 print_help
fi

# at this point something will happen, so make the submission script
if [ -f $hoagie ]; then
 rm -f $hoagie
fi
touch $hoagie

# decide what to run
if [ ! -z ${PROGRAM} ]; then
 ${program}_sub
else
 # default is dynamix
 dynamix_sub
fi
