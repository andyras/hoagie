#!/bin/bash

hoagie="$(pwd)/hoagie.sh"
HELP=0

# request multiple CPUs
function request_cpus {
 if [ ! -z ${NCPU} ]; then
  echo "#PBS -l nodes=1:ppn=${NCPU}" >> $hoagie
 fi
}

# delete the runscript
function delete_runscript {
 if [ ! -z ${KEEP_RUNSCRIPT} ]; then
  :
 else
  echo "rm -f ${hoagie}" >> $hoagie
 fi
}

# submit the job
function submit_job {
 if [ ! -z ${DRY_RUN} ]; then
  :
 else
  qsub $hoagie
 fi
}

function dynamix_sub {
# set up PBS environment variables
echo "#PBS -V" >> $hoagie
echo "#PBS -N $(basename $0)" >> $hoagie
echo "#PBS -o stdout.log" >> $hoagie
echo "#PBS -e stderr.log" >> $hoagie
echo "##PBS -o /dev/null" >> $hoagie
echo "##PBS -e /dev/null" >> $hoagie
echo "#PBS -l mem=5gb" >> $hoagie

# go to directory from which job was submitted.
echo "echo \"going to PBS working directory: \${PBS_O_WORKDIR}\"" >> $hoagie
echo "cd \${PBS_O_WORKDIR}" >> $hoagie

# run the script/binary
if [ ! -z ${EXECUTABLE} ]; then
 echo "${EXECUTABLE}" >> $hoagie
else
 #echo "./total_dynamix" >> $hoagie
 echo "sleep 10" >> $hoagie
 echo "touch me" >> $hoagie
fi

delete_runscript

submit_job

}

while getopts ":p:n:e:dkh" optname; do
 case $optname in
  p)
   PROGRAM=$OPTARG
   ;;
  n)
   echo "requesting ${OPTARG} CPUs"
   NCPU=$OPTARG
   ;;
  e)
   EXECUTABLE=$OPTARG
   ;;
  d)
   echo "dry run"
   DRY_RUN=1
   ;;
  k)
   KEEP_RUNSCRIPT=1
   ;;
  h)
   HELP=1
 esac
done

if [ ${HELP} -eq 1 ]; then
 print_help
fi

# at this point something will happen, so make the submission script
if [ -f $hoagie ]; then
 rm -f $hoagie
fi
touch $hoagie

# decide what to run
if [ ! -z ${PROGRAM} ]; then
 ${program}_sub
else
 # default is dynamix
 dynamix_sub
fi
